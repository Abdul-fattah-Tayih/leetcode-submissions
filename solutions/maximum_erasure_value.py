from locale import currency
from typing import List

class MaximumErasureValue:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        left, right = 0, 1;
        found_numbers = set([nums[left]])
        max_sum = nums[left]
        current_sum = nums[left]

        # sliding window
        while right < len(nums) and left <= right:
            left_number = nums[left]
            right_number = nums[right]

            if right_number in found_numbers:
                found_numbers.remove(left_number)
                current_sum -= left_number
                left += 1
            else:
                found_numbers.add(right_number)
                current_sum += right_number
                max_sum = max(max_sum, current_sum)
                right += 1

        return max_sum

if __name__ == '__main__':
    solution = MaximumErasureValue()
    print(solution.maximumUniqueSubarray([4,2,4,5,6]), 'should be 17')
    print(solution.maximumUniqueSubarray([5,2,1,2,5,2,1,2,5]), 'should be 8')
    print(solution.maximumUniqueSubarray([10000,1,10000,1,1,1,1,1,1]), 'should be 10001')
    print(solution.maximumUniqueSubarray([537,249,738,540,349,982,27,818,845,917,149,163,400,616,506,120,527,812,52,764,970,217,328,549,806,684,62,860,580,334,302,756,53,707,279,800,421,352,57,303,873,394,299,271,805,33,460,885,874,591,140,489,591,576,748,667,25,525,795,399,135,812,424,645,437,502,546,81,285,66,36,870,514,90,489,525,690,977,701,373,350,642,46,660,361,628,362,177,820,655,257,293,398,276,559,629,1000,858,54,961,154,719,162,645,789,927,320,595,699,329,340,368,490,224,231,642,651,342,362,540,987,411,372,402,18,77,930,819,80,647,183,211,181,923,99,781,159,365,181,293,984,69,730,653,41,107,79,620,115,771,156,766,448,190,738,589,558,186,15,467,706,913,843,757,785,927,93,258,740,911,242,501,625,509,36,320,593,13,333,457,411,289,586,26,112,816,959,501,766,502,688,688,222,19,918,514,200,176,833,568,950,18,369,714,578,782,646,621,177,527,209,790,666,817,191,661,808,983,332,793,152,39,458,110,500,357,674,137,780,786,153,74,429,41,930,765,13,582,462,229,554,538,826,984,207,168,595,517,789,344,927,910,8,99,688,549,505,295,432,795,702,639,665,277,261,51,793,717,545,976,993,214,710,304,261,176,88,487,660,871,465,253,227,601,48,112,450,698,881,656,632,640,235,760,77,465,487,339,981,782,419,165,517,809,654,33,651,462,628,894,736,916,540,136,537,35,27,352,805,18,777,911,23,352,804,650,902,783,234,393,141,403,353,941,299,744,9,895,17,376,979,683,806,704,31,801,958,548,776,557,897,792,798,520,797,264,713,214,466,864,992,626,209,97,977,64,529,118,876,617,643,272,211,936,685,212,63,471,58,654,145,471,742,623,848,245,368,290,636,356,850,382,994,45,554,376,732,225,456,89,518,439,564,786,286,856,963,831,341,147,131,915,833,534,20,982,372,938,966,966,746,577,860,539,960,767,755,479,502,16,370,442,602,913,21,956,558,431,446,41,828,763,351,545,805,869,820,398,337,215,981,488,493,313,191,464,585,247,445,976,667,271,169,768,207,46,117,947,467,678,602,42,124,388,173,514,576,271,812,17,277,34,650,417,609,902,800,430,363,367,294,433,547,986,395,9,79,330,880,647,907,473,335,440,825,176,250,327,69,338,233,975,463,215,960,764,296,227,727,297,253,468,672,226,710,335,770,241,886,155,870,293,92,985,297,212,303,32,150,309,112,71,954,810,623,953,554,776,965,486,953,412,580,554,802,757,587,504,560,728,525,918,303,773,851,507,718,775,47,435,150,873,90,989,661,894,802,566,762,808,225,707,278,20,857,900,604,756,631,181,608,167,189,855,249,800,352,869,66,133,445,178,7,891,475,22,531,686,470,623,743,565,364,351,164,428,784,216,251,585,422,16,765,998,784,744,489,842,80,259,944,347,703,766,658,337,843,368,40,133,624,99,722,524,667,323,137,655,603,796,921,26,321,546,948,352,624,480,557,192,755,183,849,842,926,852,204,665,963,462,594,991,131,18,148,908,523,239,290,82,247,770,576,534,349,662,956,283,678,914,274,524,365,273]), 'should be 36078')